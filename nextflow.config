import java.time.*

// REQUIRED PARAMETERS
params {
    // path to raw/cleaned illumina reads
    illumina1 = null
    illumina2 = null

    // path to raw/cleaned pacbio reads
    pacbio = null
    // path to raw/cleaned nanopore reads
    nanopore = null

    longReads = null

    // path to chromosome/plasmid assembly
    assembly = null

    // output directory
    outdir = null
}

// OPTIONAL PARAMETERS
// optional workflow execution params
params {
    threads = 1
    // path to directory where conda envs are stored
    condaEnvsDir = "$HOME/.conda/envs/"
}

// optional program parameters
params {
    // Assembly related

    // short reads cleaning
    shortReadsKeepPercent = 80
    shortReadsStartTrimq = 40
    shortReadsMinTrimq = 28
    bbdukArgs = 'qtrim=rl minlength=40'

    filtlongArgs = '--min_length 1000 --keep_percent 90 --trim --split 500 --mean_q_weight 10'
    filtlongCheckThreshold = '10k'

    flyeArgs = ''

    raconMaxIters = 4
    raconArgs = '-m 8 -x -6 -g -8 -w 500'
    
    pilonMaxIters = 6
    pilonArgs = ''
    pilonMemory = '13G'

    canuGenomeSize = null
    canuArgs = ''

    circlatorArgs = ''

    // whether to run circlator (+canu) or not
    forceCirclator = false
    noCirclator = false
}

// WORKFLOW ANALYSIS: report, timeline and trace
Date now = new Date()
params.timestamp = now.format("yyyyMMdd-HH-mm-ss")

report {
    enabled = true
    file = "${params.outdir == null ? '.' : params.outdir}/nextflow-report-${params.timestamp}.html"
}
timeline {
    enabled = true
    file = "${params.outdir == null ? '.' : params.outdir}/nextflow-timeline-${params.timestamp}.html"
}
trace {
    enabled = true
    file = "${params.outdir == null ? '.' : params.outdir}/nextflow-trace-${params.timestamp}.tsv"
    sep = '\t'
}

// PROFILES
profiles {
    nscc {
        workDir = "$HOME/scratch/work/"

        params.threads = 20
    }

    local {
        params.threads = 4
    }
}
